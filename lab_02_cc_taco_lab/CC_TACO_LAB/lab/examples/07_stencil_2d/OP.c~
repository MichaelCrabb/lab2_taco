#include <limits.h>
#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#include "COMPUTE.h"

#include "timer.h"
#include "utils.h"

// finalize
void op_params_finalize(op_params_t *op_params )
{
  
}

void op_inputs_finalize(op_inputs_t *op_inputs)
{
  free(op_inputs->input_x);
}

void op_outputs_finalize(op_outputs_t *op_outputs)
{
  free(op_outputs->output_y);
}

void op_inouts_finalize(op_inouts_t *op_inouts)
{
}


void benchmark_results_finalize(benchmark_results_t *bench_results)
{
  free(bench_results->results);
}

void bench_config_finalize(benchmark_configuration_t *bench_config)
{
  fclose(bench_config->result_file);
}

// init
void op_params_init( int p, benchmark_configuration_t *bench_config, op_params_t *op_params )
{
  op_params->m0 = scale_p_on_pos_ret_v_on_neg(p,bench_config->in_m0);
  op_params->n0 = scale_p_on_pos_ret_v_on_neg(p,bench_config->in_n0);
}

void op_inputs_init(op_params_t *op_params, op_inputs_t *op_inputs)
{
  op_inputs->size_x = op_params->m0*op_params->n0;
      
  op_inputs->input_x = (float *)malloc(sizeof(float)*op_inputs->size_x);
  fill_buffer_with_random( op_inputs->size_x, op_inputs->input_x );
}

void op_outputs_init(op_params_t *op_params, op_outputs_t *op_outputs)
{
      
  op_outputs->size_y   = op_params->m0*op_params->n0;
  op_outputs->output_y = (float *)malloc(sizeof(float)*op_outputs->size_y);
}

void op_inouts_init(op_params_t *op_params, op_inouts_t *op_inouts)
{
}


void init_benchmark_results(benchmark_configuration_t *bench_config, benchmark_results_t *bench_results)
{
      
  bench_results->results = (long *)malloc(sizeof(long)*bench_config->num_trials);
  bench_results->num_trials = bench_config->num_trials;
}


// deep_copy
void op_inputs_copy_deep(op_inputs_t *op_inputs_src, op_inputs_t *op_inputs_dst)
{
  op_inputs_dst->size_x = op_inputs_src->size_x;
  memcpy(op_inputs_src->input_x,
	 op_inputs_dst->input_x,
	 op_inputs_src->size_x*sizeof(float));
}

void op_outputs_copy_deep(op_outputs_t *op_outputs_src, op_outputs_t *op_outputs_dst)
{
  op_outputs_dst->size_y = op_outputs_src->size_y;
  memcpy(op_outputs_src->output_y,
	 op_outputs_dst->output_y,
	 op_outputs_src->size_y*sizeof(float));
}

void op_inouts_copy_deep(op_inouts_t *op_inouts_src, op_inouts_t *op_inouts_dst)
{
}

// processing results

void compute_verifier_results(benchmark_configuration_t *bench_config,
			      op_params_t  *op_params,
			      op_outputs_t *op_outputs_tst,
			      op_outputs_t *op_outputs_ref,
			      op_inouts_t  *op_inouts_tst,
			      op_inouts_t  *op_inouts_ref)
{
  float *output_diffs = (float *)malloc(op_outputs_ref->size_y*sizeof(float));
  float res = compute_pair_wise_diff(op_outputs_ref->size_y,1,1,1,
				     op_outputs_ref->output_y,
				     op_outputs_tst->output_y,
				     output_diffs);
  long counts = count_num_errors(op_outputs_ref->size_y,1,1,1,
				 output_diffs);

  fprintf(bench_config->result_file, "%i, %li, %f, ",
	  op_params->m0,
	  counts, res);
      
  // if our error is greater than some threshold
  if( res > bench_config->error_threshold )
    fprintf(bench_config->result_file, "FAIL\n");
  else
    fprintf(bench_config->result_file, "PASS\n");

  free(output_diffs);

}


void compute_benchmark_results( benchmark_configuration_t *bench_config,
				benchmark_results_t *bench_results,
				model_function_t *fun_compute_model,
				op_params_t  *op_params,
				op_inputs_t  *op_inputs_tst,
				op_outputs_t *op_outputs_tst,
				op_inouts_t  *op_inouts_tst,
				hwctx_t      *hw_ctx )
{
  long min_res = pick_min_in_list(bench_results->num_trials, bench_results->results);
  float nanoseconds = ((float)min_res)/(bench_config->num_runs_per_trial);

  op_model_t model;

  fun_compute_model( &model,
		     op_params,
		     op_inputs_tst,
		     op_outputs_tst,
		     op_inouts_tst,
		     hw_ctx );
      
      
  // This gives us throughput as GFLOP/s
  double flop   =  model.flops;
      
  double throughput   =  flop / nanoseconds;
  double bytes        =  model.bytes;

  double gbytes_per_s =  bytes/ nanoseconds;

  // fprintf(bench_config.result_file,
  // "size,m,n,flop,throughput,bytes,GB_per_s,nanoseconds\n");
  fprintf(bench_config->result_file,
	  "%i,%i,%i,"
	  "%2.3e,%2.3e,"
	  "%2.3e,%2.3e,"
	  "%2.3e\n",
	  op_params->m0,
	  op_params->m0,
	  op_params->n0,
	  flop, throughput,
	  bytes, gbytes_per_s,
	  nanoseconds);
  
}

void bench_config_init( int argc, char *argv[], benchmark_configuration_t *bench_config)
{
  // TODO: Parameterize these
  bench_config->num_trials = 10;
  bench_config->num_runs_per_trial = 10;

  bench_config->error_threshold = ERROR_THRESHOLD;
  
  // Get command line arguments
  if(argc == 1 )
    {
      bench_config->min_size  = 16;
      bench_config->max_size  = 1524;
      bench_config->step_size = 16;

      // defaults
      bench_config->in_m0=1;
      bench_config->in_n0=1;

      // default to printing to stdout
      bench_config->result_file = stdout;
    }
  else if(argc == 5 + 1 || argc == 6 + 1 )
    {
      bench_config->min_size  = atoi(argv[1]);
      bench_config->max_size  = atoi(argv[2]);
      bench_config->step_size = atoi(argv[3]);

      bench_config->in_m0=atoi(argv[4]);
      bench_config->in_n0=atoi(argv[5]);

      // default to printing to stdout
      bench_config->result_file = stdout;

      // If we were given a file, use that.
      if(argc == 6 + 1)
	bench_config->result_file = fopen(argv[6],"w");

    }
  else
    {
      //        argv 0   1    2    3  4  5          6
      printf("usage: %s min max step m0 n0 [filename]\n",
	     argv[0]);
      exit(1);
    }  
}
