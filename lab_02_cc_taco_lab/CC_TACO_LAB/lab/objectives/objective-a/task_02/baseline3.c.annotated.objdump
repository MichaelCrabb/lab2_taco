
baseline3.c.dbg.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <compute_model_tst>:
#ifndef COMPUTE_MODEL_NAME
#define COMPUTE_MODEL_NAME baseline_model
#endif

void COMPUTE_MODEL_NAME(op_model_t *model, op_params_t *op_params, op_inputs_t *inputs, op_outputs_t *outputs, op_inouts_t *inouts, hwctx_t *hwctx)
{
   0:	f3 0f 1e fa          	endbr64
model->flops = op_params->m0;
   4:	8b 06                	mov    (%rsi),%eax
model->bytes = (((3 * op_params->m0) * sizeof(float)) * 1);
   6:	c5 f8 57 c0          	vxorps %xmm0,%xmm0,%xmm0
model->flops = op_params->m0;
   a:	c5 fa 2a c8          	vcvtsi2ss %eax,%xmm0,%xmm1
model->bytes = (((3 * op_params->m0) * sizeof(float)) * 1);
   e:	8d 04 40             	lea    (%rax,%rax,2),%eax
  11:	48 98                	cltq
  13:	48 c1 e0 02          	shl    $0x2,%rax
  17:	78 17                	js     30 <compute_model_tst+0x30>
  19:	c4 e1 fa 2a c0       	vcvtsi2ss %rax,%xmm0,%xmm0
model->flops = op_params->m0;
  1e:	c5 f0 14 c8          	vunpcklps %xmm0,%xmm1,%xmm1
  22:	c5 f8 13 0f          	vmovlps %xmm1,(%rdi)

}
  26:	c3                   	ret
  27:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
  2e:	00 00 
model->bytes = (((3 * op_params->m0) * sizeof(float)) * 1);
  30:	48 d1 e8             	shr    $1,%rax
  33:	c4 e1 fa 2a c0       	vcvtsi2ss %rax,%xmm0,%xmm0
  38:	c5 fa 58 c0          	vaddss %xmm0,%xmm0,%xmm0
model->flops = op_params->m0;
  3c:	c5 f0 14 c8          	vunpcklps %xmm0,%xmm1,%xmm1
  40:	c5 f8 13 0f          	vmovlps %xmm1,(%rdi)
}
  44:	c3                   	ret
  45:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
  4c:	00 00 00 00 

0000000000000050 <compute_tst>:
void COMPUTE_NAME(op_params_t *op_params, op_inputs_t *inputs, op_outputs_t *outputs, op_inouts_t *inouts, hwctx_t *hwctx)
{
  50:	f3 0f 1e fa          	endbr64
const int m0 = op_params->m0;
  54:	44 8b 0f             	mov    (%rdi),%r9d
float * x = inputs->x_vect;
float * y = inputs->y_vect;
float * z = inouts->z_vect;
  57:	48 8b 49 10          	mov    0x10(%rcx),%rcx
int i0_o;
int i0_i;
int j0;
BEGIN_INSTRUMENTATION ;
for (i0_o = 0; i0_o < m0; i0_o += 8)
  5b:	ba 20 00 00 00       	mov    $0x20,%edx
  60:	45 31 c0             	xor    %r8d,%r8d
float * x = inputs->x_vect;
  63:	48 8b 7e 18          	mov    0x18(%rsi),%rdi
float * y = inputs->y_vect;
  67:	48 8b 76 20          	mov    0x20(%rsi),%rsi
for (i0_o = 0; i0_o < m0; i0_o += 8)
  6b:	45 85 c9             	test   %r9d,%r9d
  6e:	7e 2e                	jle    9e <compute_tst+0x4e>
{
    for (i0_i = 0; i0_i < 8; i0_i += 1){
  70:	48 8d 42 e0          	lea    -0x20(%rdx),%rax
  74:	0f 1f 40 00          	nopl   0x0(%rax)
    z[i0_o + i0_i] = (x[i0_o + i0_i] * y[i0_o + i0_i]);
  78:	c5 fa 10 04 07       	vmovss (%rdi,%rax,1),%xmm0
  7d:	c5 fa 59 04 06       	vmulss (%rsi,%rax,1),%xmm0,%xmm0
  82:	c5 fa 11 04 01       	vmovss %xmm0,(%rcx,%rax,1)
    for (i0_i = 0; i0_i < 8; i0_i += 1){
  87:	48 83 c0 04          	add    $0x4,%rax
  8b:	48 39 c2             	cmp    %rax,%rdx
  8e:	75 e8                	jne    78 <compute_tst+0x28>
for (i0_o = 0; i0_o < m0; i0_o += 8)
  90:	41 83 c0 08          	add    $0x8,%r8d
  94:	48 83 c2 20          	add    $0x20,%rdx
  98:	45 39 c1             	cmp    %r8d,%r9d
  9b:	7f d3                	jg     70 <compute_tst+0x20>
    }

}
END_INSTRUMENTATION ;

}
  9d:	c3                   	ret
  9e:	c3                   	ret
